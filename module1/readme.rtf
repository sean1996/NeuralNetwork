{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12300\viewh13440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs34 \cf0 This project contains python implementations of KNN, SVM,  Softmax, and a simple two layer neural network.\
\
K Nearest Neighbor(KNN): \
cs231n/classifiers/k_nearest_neighbor.py provides implementation of training and prediction of KNN.\
knn.ipynb provides python scripts for training and testing of KNN.\
\
Support Vector Machine (SVM):\
cs231n/classifiers/linear_svm.py provides implementation for svm loss of any function.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 cs231n/classifiers/linear_classifier.py provides implementation for a linear classier that deploys svm loss.\
svm.ipynb provides python scripts for training and testing of SVM linear classifier.\
\
Softmax:\
cs231n/classifiers/softmax.py provides implementation for softmax loss of any function.\
cs231n/classifiers/linear_classifier.py provides implementation for a linear classier that deploys softmax loss.\
softmax.ipynb provides python scripts for training and testing of softmax linear classifier.\
\
Two Layer Neural Network:\
cs231n/classifiers/neural_net.py provides implementation for a fully connected two layer neural network that uses the following structure: input - fully connected layer - ReLU - fully connected layer - softmax\
two_layer_net.ipynb provides python scripts for training and testing of such fully connected two layer neural network.\
\
\
\
\
\
\
\
\
}